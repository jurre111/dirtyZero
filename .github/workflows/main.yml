name: Xcode - Build

on: 
  push:
  pull_request:
  workflow_dispatch:
    inputs: 
      release__nightly:
        description: Create a nightly release
        type: boolean
        required: false

jobs:
  build:
    name: Build using xcodebuild command
    runs-on: macos-latest
    env:
      scheme: dirtyZero
      archive_path: archive
    outputs:
      scheme: ${{ steps.scheme.outputs.scheme }}
      archive_path: ${{ env.archive_path }}

    steps:
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set Scheme
        id: scheme
        run: |
          if [ $scheme = default ]
          then
            scheme_list=$(xcodebuild -list -json | tr -d "\n")
            scheme=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
            echo Using default scheme: $scheme
          else
            echo Using configured scheme: $scheme
          fi
          echo "scheme=$scheme" >> $GITHUB_OUTPUT
      - name: Set filetype_parameter
        id: filetype_parameter
        run: |
          filetype_parameter=`ls -A | grep -i \\.xcworkspace\$ && echo workspace || echo project`
          echo "filetype_parameter=$filetype_parameter" >> $GITHUB_OUTPUT
      - name: Set file_to_build
        id: file_to_build
        run: |
          file_to_build=`ls -A | grep -i \\.xcworkspace\$ || ls -A | grep -i \\.xcodeproj\$`
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          echo "file_to_build=$file_to_build" >> $GITHUB_OUTPUT
      - name: Archive
        env:
          scheme: ${{ steps.scheme.outputs.scheme }}
          filetype_parameter: ${{ steps.filetype_parameter.outputs.filetype_parameter }}
          file_to_build: ${{ steps.file_to_build.outputs.file_to_build }}
        run: xcodebuild archive -archivePath "$archive_path" -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -sdk iphoneos -arch arm64 -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO | xcpretty && exit ${PIPESTATUS[0]}
      - name: Tar Build Artifact
        run: tar -cvf "$archive_path.xcarchive.tar" "$archive_path.xcarchive"
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.archive_path }}.xcarchive.tar
          path: ${{ env.archive_path }}.xcarchive.tar

  package:
    name: Create fake-signed ipa
    runs-on: ubuntu-latest
    needs: [build]
    env:
      scheme: ${{ needs.build.outputs.scheme }}
      archive_path: ${{ needs.build.outputs.archive_path }}
    outputs:
      scheme: ${{ steps.scheme.outputs.scheme }}
      artifact: ${{ env.scheme }}.ipa

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download a Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.archive_path }}.xcarchive.tar
      - name: Extract Build Artifact
        run: tar -xf "$archive_path.xcarchive.tar"
      - name: Install ldid
        run: |
          if [ `uname -s` = "Linux" ]; then
            curl -sSL -o /usr/local/bin/ldid "${{ github.server_url }}/ProcursusTeam/ldid/releases/latest/download/ldid_linux_`uname -m`"
            chmod +x /usr/local/bin/ldid
          elif [ `uname -s` = "Darwin" ]; then
            brew install ldid
          else
            exit 1
          fi
      - name: Fakesign
        run: |
          ls "$archive_path.xcarchive/Products/Applications/dirtyZero.app"
          find "$archive_path.xcarchive/Products/Applications/$scheme.app" -type d -path '*/Frameworks/*.framework' -exec ldid -Sentitlements.xml \{\} \;
          ldid -Sentitlements.xml "$archive_path.xcarchive/Products/Applications/$scheme.app"
      - name: Create IPA
        run: |
          mv "$archive_path.xcarchive/Products/Applications" Payload
          zip -r "$scheme.ipa" "Payload" -x "._*" -x ".DS_Store" -x "__MACOSX"
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.scheme }}.ipa
          path: ${{ env.scheme }}.ipa
      - name: Move IPA to root of repository
        run: |
          mkdir -p downloads
          mv "$scheme.ipa" "$GITHUB_WORKSPACE/downloads/"
      - name: Commit and push IPA to repository
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add "$GITHUB_WORKSPACE/downloads/$scheme.ipa"
          git commit -m "Add IPA build artifact"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sign-ipa_1:
      name: Sign IPA with ZSign
      runs-on: ubuntu-latest
      needs: [package]
      env:
        scheme: dirtyZero
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
        - name: Download Unsigned IPA
          uses: actions/download-artifact@v4
          with:
            name: ${{env.scheme}}.ipa
        - name: Install ZSign dependencies
          run: |
            sudo apt-get install -y git g++ pkg-config libssl-dev libminizip-dev
        - name: Decode certificate and provisioning profile
          run: |
            echo "$CERT_P12_BASE64" | base64 -d > cert.p12
            echo "$MOBILEPROVISION_B64" | base64 -d > profile.prov
          env:
            CERT_P12_BASE64: ${{ secrets.P12_BASE64 }}
            MOBILEPROVISION_B64: ${{ secrets.PROVISION_BASE64 }}

        - name: Clone and Build ZSign
          run: |
            git clone https://github.com/jurre111/zsign.git
            cd zsign/build/linux
            make clean && make
            sudo apt-get install -y ideviceinstaller
            mkdir signed
            cd ../../..
            ls
            unzip "${{env.scheme}}.ipa"
        - name: Sign IPA using ZSign
          run: |
            ./zsign/bin/zsign -k cert.p12 -p "" -m profile.prov -o payload.zip "Payload/${{env.scheme}}.app"
            zip -r "${{env.scheme}}-signed.ipa" Payload
        - name: Move IPA to root of repository
          run: |
            mv "${{env.scheme}}-signed.ipa" "$GITHUB_WORKSPACE/downloads/"
        - name: Create manifest.plist and add to repo
          run: |
            sudo apt-get install libxml2-utils
            sudo apt-get install libplist-utils
            cp Payload/${{env.scheme}}.app/Info.plist Info.plist
            ls
            echo "Copy succeeded!"
            plistutil -i Info.plist -o Info.plist -f xml
            echo "Conversion succeeded"
            bundle_id=$(xmllint --xpath "string(//key[.='CFBundleIdentifier']/following-sibling::string[1])" "$info_plist")
            version=$(xmllint --xpath "string(//key[.='CFBundleShortVersionString']/following-sibling::string[1])" "$info_plist")
            app_title=$(xmllint --xpath "string(//key[.='CFBundleName']/following-sibling::string[1])" "$info_plist")
            cat > "manifest.plist" <<EOF
            <?xml version="1.0" encoding="UTF-8"?>
            <plist version="1.0">
              <dict>
                <key>items</key>
                <array>
                  <dict>
                    <key>assets</key>
                    <array>
                      <dict>
                        <key>kind</key>
                        <string>software-package</string>
                        <key>url</key>
                        <string>https://yourdomain.com/path/to/$app_name.ipa</string> <!-- Replace with actual URL to your IPA -->
                      </dict>
                    </array>
                    <key>metadata</key>
                    <dict>
                      <key>bundle-identifier</key>
                      <string>$bundle_id</string>
                      <key>bundle-version</key>
                      <string>$version</string>
                      <key>kind</key>
                      <string>software</string>
                      <key>title</key>
                      <string>$app_title</string>
                    </dict>
                  </dict>
                </array>
              </dict>
            </plist>
            EOF
            mv "manifest.plist" "$GITHUB_WORKSPACE/downloads/"
        - name: Commit and push IPA to repository
          run: |
            git config --global user.name "github-actions"
            git config --global user.email "github-actions@github.com"
            git pull
            git add "$GITHUB_WORKSPACE/downloads/${{env.scheme}}-signed.ipa"
            git add "$GITHUB_WORKSPACE/downloads/manifest.plist"
            git commit -m "Add signed IPA build artifact and correct manifest.plist"
            git push
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release__nightly:
    name: Nightly Release
    permissions:
      contents: write
    if: inputs.release__nightly || github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [package]
    concurrency:
      group: release__nightly
      cancel-in-progress: true

    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.package.outputs.artifact }}
      - name: Nightly Release
        uses: andelf/nightly-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with: 
          body: |
            This is a nightly release [created automatically with GitHub Actions workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}).
          files: |
            ${{ needs.package.outputs.artifact }}
