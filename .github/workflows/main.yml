name: Xcode - Build

on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      release__nightly:
        description: Create a nightly release
        type: boolean
        required: false

jobs:
  build:
    name: Build and Sign with Xcode
    runs-on: macos-latest
    env:
      scheme: dirtyZero
      archive_path: archive
    outputs:
      ipa_path: ${{ env.scheme }}.ipa

    steps:
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Decode Certificate and Provisioning Profile
        run: |
          echo "${{ secrets.P12_BASE64 }}" | base64 -d > certificate.p12
          echo "${{ secrets.PROVISIONING_PROFILE_BASE64 }}" | base64 -d > profile.mobileprovision

      - name: Set up Keychain and Import Certificate
        run: |
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import certificate.p12 -k build.keychain -P "${{ secrets.P12_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain

      - name: Install Provisioning Profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" /dev/stdin <<< $(security cms -D -i profile.mobileprovision))
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision

      - name: Set Scheme
        id: scheme
        run: |
          if [ $scheme = default ]
          then
            scheme_list=$(xcodebuild -list -json | tr -d "\n")
            scheme=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")          
          fi
          echo "scheme=$scheme" >> $GITHUB_OUTPUT

      - name: Set filetype_parameter
        id: filetype_parameter
        run: |
          filetype_parameter=`ls -A | grep -i \\.xcworkspace\$ && echo workspace || echo project`
          echo "filetype_parameter=$filetype_parameter" >> $GITHUB_OUTPUT

      - name: Set file_to_build
        id: file_to_build
        run: |
          file_to_build=`ls -A | grep -i \\.xcworkspace\$ || ls -A | grep -i \\.xcodeproj\$`
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          echo "file_to_build=$file_to_build" >> $GITHUB_OUTPUT

      - name: Archive
        env:
          scheme: ${{ steps.scheme.outputs.scheme }}
          filetype_parameter: ${{ steps.filetype_parameter.outputs.filetype_parameter }}
          file_to_build: ${{ steps.file_to_build.outputs.file_to_build }}
        run: |
          xcodebuild archive \
            -archivePath "$archive_path" \
            -scheme "$scheme" \
            -"$filetype_parameter" "$file_to_build" \
            -sdk iphoneos \
            -configuration Release \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="${{ secrets.SIGNING_IDENTITY }}" \
            DEVELOPMENT_TEAM="${{ secrets.TEAM_ID }}" \
            PROVISIONING_PROFILE_SPECIFIER=""

      - name: Create ExportOptions.plist
        run: |
          cat > ExportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>ad-hoc</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>teamID</key>
            <string>${{ secrets.TEAM_ID }}</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>com.example.yourapp</key>
              <string>YourProvisioningProfileName</string>
            </dict>
          </dict>
          </plist>
          EOF

      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath "$archive_path" \
            -exportPath export \
            -exportOptionsPlist ExportOptions.plist
          mv export/*.ipa ${{ env.scheme }}.ipa

      - name: Upload Signed IPA
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.scheme }}.ipa
          path: ${{ env.scheme }}.ipa

      - name: Clean up keychain
        if: always()
        run: |
          security delete-keychain build.keychain || true

  release__nightly:
    name: Nightly Release
    permissions:
      contents: write
    if: inputs.release__nightly || github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [build]
    concurrency:
      group: release__nightly
      cancel-in-progress: true

    steps:
      - name: Download IPA
        uses: actions/download-artifact@v4
        with:
          name: dirtyZero.ipa

      - name: Nightly Release
        uses: andelf/nightly-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: |
            This is a nightly release [created automatically with GitHub Actions workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}).
          files: dirtyZero.ipa
