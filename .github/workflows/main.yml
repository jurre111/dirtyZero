name: Xcode - Build

on: 
  push:
  pull_request:
  workflow_dispatch:
    inputs: 
      release__nightly:
        description: Create a nightly release
        type: boolean
        required: false

jobs:
  build:
    name: Build using xcodebuild command
    runs-on: macos-latest
    env:
      scheme: dirtyZero
      archive_path: archive
    outputs:
      scheme: ${{ steps.scheme.outputs.scheme }}
      archive_path: ${{ env.archive_path }}

    steps:
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set Scheme
        id: scheme
        run: |
          if [ $scheme = default ]
          then
            scheme_list=$(xcodebuild -list -json | tr -d "\n")
            scheme=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
            echo Using default scheme: $scheme
          else
            echo Using configured scheme: $scheme
          fi
          echo "scheme=$scheme" >> $GITHUB_OUTPUT
      - name: Set filetype_parameter
        id: filetype_parameter
        run: |
          filetype_parameter=`ls -A | grep -i \\.xcworkspace\$ && echo workspace || echo project`
          echo "filetype_parameter=$filetype_parameter" >> $GITHUB_OUTPUT
      - name: Set file_to_build
        id: file_to_build
        run: |
          file_to_build=`ls -A | grep -i \\.xcworkspace\$ || ls -A | grep -i \\.xcodeproj\$`
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          echo "file_to_build=$file_to_build" >> $GITHUB_OUTPUT
      - name: Archive
        env:
          scheme: ${{ steps.scheme.outputs.scheme }}
          filetype_parameter: ${{ steps.filetype_parameter.outputs.filetype_parameter }}
          file_to_build: ${{ steps.file_to_build.outputs.file_to_build }}
        run: xcodebuild archive -archivePath "$archive_path" -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -sdk iphoneos -arch arm64 -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO | xcpretty && exit ${PIPESTATUS[0]}
      - name: Tar Build Artifact
        run: tar -cvf "$archive_path.xcarchive.tar" "$archive_path.xcarchive"
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.archive_path }}.xcarchive.tar
          path: ${{ env.archive_path }}.xcarchive.tar

  sign:
    name: Sign IPA with certificate
    runs-on: macos-latest
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: dirtyZero.ipa
          path: downloads

      - name: Prepare signing materials
        run: |
          echo "$P12_BASE64" | base64 -D > signing.p12
          echo "$PROVISION_BASE64" | base64 -D > profile.mobileprovision
        env:
          P12_BASE64: ${{ secrets.P12_BASE64 }}
          PROVISION_BASE64: ${{ secrets.PROVISION_BASE64 }}

      - name: Create Keychain and Import Cert
        run: |
          security create-keychain -p password temp.keychain
          security default-keychain -s temp.keychain
          security unlock-keychain -p password temp.keychain
          security import signing.p12 -k temp.keychain -P "${{ secrets.P12_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k password temp.keychain

      - name: Unzip IPA
        run: |
          mkdir payload
          unzip downloads/dirtyZero.ipa -d payload

      - name: Embed Provisioning Profile
        run: |
          cp profile.mobileprovision payload/Payload/dirtyZero.app/embedded.mobileprovision

      - name: Extract Entitlements
        run: |
          codesign -d --entitlements :- payload/Payload/dirtyZero.app > entitlements.plist || echo ""

      - name: Resign App
        run: |
          IDENTITY=$(security find-identity -v -p codesigning temp.keychain | grep 'Apple' | awk '{print $2}')
          echo "Using identity: $IDENTITY"
          codesign -f -s "$IDENTITY" --entitlements entitlements.plist --keychain temp.keychain payload/Payload/dirtyZero.app

      - name: Verify Signature
        run: |
          codesign -dv --verbose=4 payload/Payload/dirtyZero.app

      - name: Repackage Signed IPA
        run: |
          cd payload
          zip -r ../dirtyZero-signed.ipa Payload
          cd ..

      - name: Upload Signed IPA
        uses: actions/upload-artifact@v4
        with:
          name: dirtyZero-signed
          path: dirtyZero-signed.ipa







  release__nightly:
    name: Nightly Release
    permissions:
      contents: write
    if: inputs.release__nightly || github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [package]
    concurrency:
      group: release__nightly
      cancel-in-progress: true

    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.package.outputs.artifact }}
      - name: Nightly Release
        uses: andelf/nightly-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with: 
          body: |
            This is a nightly release [created automatically with GitHub Actions workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}).
          files: |
            ${{ needs.package.outputs.artifact }}
